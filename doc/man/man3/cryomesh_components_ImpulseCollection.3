.TH "cryomesh::components::ImpulseCollection" 3 "Tue Mar 6 2012" "cryomesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cryomesh::components::ImpulseCollection \- 
.PP
\fBImpulseCollection\fP represents a collection of \fBImpulse\fP objects\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ImpulseCollection\&.h>\fP
.PP
Inherits \fBcryomesh::dataobjects::DataObjectController< unsigned long int, double >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBComparison\fP { \fBGreaterThan\fP, \fBLessThan\fP, \fBEqualTo\fP, \fBNotEqualTo\fP, \fBLessThanOrEqualTo\fP, \fBGreaterThanOrEqualTo\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBImpulseCollection\fP ()"
.br
.RI "\fIContructor for \fBImpulseCollection\fP\&. \fP"
.ti -1c
.RI "virtual \fB~ImpulseCollection\fP ()"
.br
.RI "\fIDestructor for \fBImpulseCollection\fP\&. \fP"
.ti -1c
.RI "double \fBgetActivity\fP (\fBcommon::Cycle\fP cycle) const "
.br
.RI "\fIGet activity at cycle\&. \fP"
.ti -1c
.RI "double \fBgetActivity\fP () const "
.br
.RI "\fIGet activity at current cycle\&. \fP"
.ti -1c
.RI "void \fBclearImpulses\fP ()"
.br
.RI "\fIClear collection up to present cycle\&. \fP"
.ti -1c
.RI "void \fBclearImpulses\fP (\fBcommon::Cycle\fP cycle)"
.br
.RI "\fIClear collection up to specified cycle\&. \fP"
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearImpulses\fP (\fBcommon::Cycle\fP cycleStart, \fBcommon::Cycle\fP cycleEnd)"
.br
.RI "\fIClear the Impulses that start on or after cycle start parameter and finish before cycle end parameter\&. \fP"
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearActiveImpulses\fP ()"
.br
.RI "\fIClear cycles that are active on this cycle\&. \fP"
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearActiveImpulses\fP (\fBcommon::Cycle\fP cycle)"
.br
.RI "\fIClear cycles that are active on cycle\&. \fP"
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearActiveImpulses\fP (\fBcommon::Cycle\fP cycleStart, \fBcommon::Cycle\fP cycleEnd)"
.br
.RI "\fIClear cycles that are active on cycle range\&. \fP"
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearActivitiesByMinimum\fP (double activity)"
.br
.RI "\fIClear the Impulses that have activities less than parameter\&. \fP"
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearActivitiesByMaximum\fP (double activity)"
.br
.RI "\fIClear the Impulses that have activities greater than parameter\&. \fP"
.ti -1c
.RI "void \fBdecrementActivityTimers\fP ()"
.br
.RI "\fIDecrement the activity timers of all impulses\&. \fP"
.ti -1c
.RI "std::list< boost::shared_ptr
.br
< \fBImpulse\fP > > \fBgetByActivityTimerValue\fP (double value, \fBComparison\fP comp)"
.br
.RI "\fIGet impulse list by activity timer value\&. \fP"
.ti -1c
.RI "std::list< boost::shared_ptr
.br
< \fBImpulse\fP > > \fBremoveByActivityTimerValue\fP (double value=0, \fBComparison\fP comp=\fBLessThanOrEqualTo\fP)"
.br
.RI "\fIremove impulses by activity timer value \fP"
.ti -1c
.RI "virtual void \fBrefreshDataObject\fP ()"
.br
.RI "\fIInherited from DataObjectController\&. \fP"
.ti -1c
.RI "virtual void \fBenableDebug\fP (bool b)"
.br
.ti -1c
.RI "\fBImpulseCollection\fP & \fBoperator=\fP (const \fBImpulseCollection\fP &obj)"
.br
.RI "\fIAssignment operator\&. \fP"
.ti -1c
.RI "\fBImpulseCollection\fP & \fBoperator+=\fP (const \fBImpulseCollection\fP &obj)"
.br
.RI "\fIDestructive addition and assignment operator\&. \fP"
.ti -1c
.RI "const \fBImpulseCollection\fP \fBoperator+\fP (const \fBImpulseCollection\fP &obj) const "
.br
.RI "\fINon-destructive addition operator\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBImpulseCollection\fP &obj) const "
.br
.RI "\fIComparator operator\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBImpulseCollection\fP &obj) const "
.br
.RI "\fINot comparator operator\&. \fP"
.ti -1c
.RI "virtual void \fBenableLogging\fP (bool enable)"
.br
.RI "\fIWhether logging is enabled or not\&. \fP"
.ti -1c
.RI "virtual const std::map
.br
< unsigned long int, double > & \fBgetMap\fP ()"
.br
.RI "\fIGet all cycle values\&. \fP"
.ti -1c
.RI "virtual const 
.br
\fBdataobjects::DataObject\fP
.br
< unsigned long int, double > & \fBgetDataObject\fP ()"
.br
.RI "\fIGet data object\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "std::map< boost::uuids::uuid, 
.br
boost::shared_ptr< \fBImpulse\fP > > \fBclearActivitiesByValue\fP (double activity, bool greater)"
.br
.RI "\fIGet the associated Mesh\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBdataobjects::DataObject\fP
.br
< unsigned long int, double > \fBdataObject\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBImpulseCollection\fP &obj)"
.br
.RI "\fITo stream operator\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\fBImpulseCollection\fP represents a collection of \fBImpulse\fP objects\&. 

A collection of Impulses that allows for Impulses to be held, 'moved forward' in time, and summated in some way 
.PP
Definition at line 35 of file ImpulseCollection\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBcryomesh::components::ImpulseCollection::Comparison\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIGreaterThan \fP\fP
.TP
\fB\fILessThan \fP\fP
.TP
\fB\fIEqualTo \fP\fP
.TP
\fB\fINotEqualTo \fP\fP
.TP
\fB\fILessThanOrEqualTo \fP\fP
.TP
\fB\fIGreaterThanOrEqualTo \fP\fP

.PP
Definition at line 38 of file ImpulseCollection\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBcryomesh::components::ImpulseCollection::ImpulseCollection\fP ()"
.PP
Contructor for \fBImpulseCollection\fP\&. Contruct using default Mesh 
.PP
Definition at line 18 of file ImpulseCollection\&.cpp\&.
.SS "\fBcryomesh::components::ImpulseCollection::~ImpulseCollection\fP ()\fC [virtual]\fP"
.PP
Destructor for \fBImpulseCollection\fP\&. Destructor 
.PP
Definition at line 22 of file ImpulseCollection\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearActiveImpulses\fP ()"
.PP
Clear cycles that are active on this cycle\&. Update the collection to by dropping all impulses that are active on this cycle
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The collection of deleted impulses 
.RE
.PP

.PP
Definition at line 122 of file ImpulseCollection\&.cpp\&.
.PP
References cryomesh::common::TimeKeeper::getTimeKeeper()\&.
.PP
Referenced by clearActiveImpulses(), cryomesh::components::Node::enterRecovery(), and cryomesh::components::Node::update()\&.
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearActiveImpulses\fP (\fBcommon::Cycle\fPcycle)"
.PP
Clear cycles that are active on cycle\&. Update the collection to by dropping all impulses that are active on cycle
.PP
\fBParameters:\fP
.RS 4
\fI\fBcommon::Cycle\fP\fP cycle The cycle to drop inclusive impulses from
.RE
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The collection of deleted impulses 
.RE
.PP

.PP
Definition at line 127 of file ImpulseCollection\&.cpp\&.
.PP
References clearActiveImpulses()\&.
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearActiveImpulses\fP (\fBcommon::Cycle\fPcycleStart, \fBcommon::Cycle\fPcycleEnd)"
.PP
Clear cycles that are active on cycle range\&. Interval is [cycle_start,cycle_end)
.PP
Update the collection to by dropping all impulses that are active on cycle range
.PP
\fBParameters:\fP
.RS 4
\fI\fBcommon::Cycle\fP\fP cycleStart The start cycle to drop inclusive impulses from 
.br
\fI\fBcommon::Cycle\fP\fP cycleEnd The end cycle to drop inclusive impulses from excluded
.RE
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The collection of deleted impulses 
.RE
.PP

.PP
Definition at line 131 of file ImpulseCollection\&.cpp\&.
.PP
References cryomesh::common::TimeKeeper::getCycle(), cryomesh::components::Impulse::getFirstActiveCycle(), cryomesh::components::Impulse::getLastActiveCycle(), cryomesh::common::TimeKeeper::getTimeKeeper(), and cryomesh::components::Impulse::isActive()\&.
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearActivitiesByMaximum\fP (doubleactivity)"
.PP
Clear the Impulses that have activities greater than parameter\&. \fBParameters:\fP
.RS 4
\fIdouble\fP activity The maximum activity impulses must have to avoid deleteion
.RE
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The deleted collection of impulses 
.RE
.PP

.PP
Definition at line 188 of file ImpulseCollection\&.cpp\&.
.PP
References clearActivitiesByValue()\&.
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearActivitiesByMinimum\fP (doubleactivity)"
.PP
Clear the Impulses that have activities less than parameter\&. \fBParameters:\fP
.RS 4
\fIdouble\fP activity The minimum activity impulses must have to avoid deleteion
.RE
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The deleted collection of impulses 
.RE
.PP

.PP
Definition at line 184 of file ImpulseCollection\&.cpp\&.
.PP
References clearActivitiesByValue()\&.
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearActivitiesByValue\fP (doubleactivity, boolgreater)\fC [protected]\fP"
.PP
Get the associated Mesh\&. \fBReturns:\fP
.RS 4
Mesh
.RE
.PP
const boost::shared_ptr<Mesh> getMesh() const; Clear the Impulses that have activities greater or less than parameter
.PP
\fBParameters:\fP
.RS 4
\fIdouble\fP activity The maximum or minimum activity impulses must have to avoid deleteion 
.br
\fIbool\fP True is first parameter is maximum allowed value, false if its the minimum
.RE
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The deleted collection of impulses 
.RE
.PP

.PP
Definition at line 400 of file ImpulseCollection\&.cpp\&.
.PP
Referenced by clearActivitiesByMaximum(), and clearActivitiesByMinimum()\&.
.SS "void \fBcryomesh::components::ImpulseCollection::clearImpulses\fP ()"
.PP
Clear collection up to present cycle\&. Update the collection to present cycle (non-inclusive) by dropping all impulses that are 'in the past' relative to that cycle\&. Interval is [0,present_cycle) 
.PP
Definition at line 56 of file ImpulseCollection\&.cpp\&.
.PP
References cryomesh::common::TimeKeeper::getCycle(), and cryomesh::common::TimeKeeper::getTimeKeeper()\&.
.PP
Referenced by clearImpulses(), and cryomesh::components::Node::updateImpulses()\&.
.SS "void \fBcryomesh::components::ImpulseCollection::clearImpulses\fP (\fBcommon::Cycle\fPcycle)"
.PP
Clear collection up to specified cycle\&. Update the collection to specified cycle (non-inclusive) by dropping all impulses that are 'in the past' relative to that cycle\&. Interval is [0,cycle)
.PP
\fBParameters:\fP
.RS 4
\fI\fBcommon::Cycle\fP\fP cycle The cycle that is the cutoff point for the collection 
.RE
.PP

.PP
Definition at line 60 of file ImpulseCollection\&.cpp\&.
.PP
References clearImpulses()\&.
.SS "std::map< boost::uuids::uuid, boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::clearImpulses\fP (\fBcommon::Cycle\fPcycleStart, \fBcommon::Cycle\fPcycleEnd)"
.PP
Clear the Impulses that start on or after cycle start parameter and finish before cycle end parameter\&. Interval is [cycle_start,cycle_end)
.PP
\fBParameters:\fP
.RS 4
\fICycle\fP cycleStart Cycle parameter that marks the start of the cleared area 
.br
\fICycle\fP cycleEnd Cycle parameter that marks the end of the cleared area (non-inclusive)
.RE
.PP
\fBReturns:\fP
.RS 4
std::map<boost::uuids::uuid, boost::shared_ptr<Impulse> > The deleted collection of impulses 
.RE
.PP

.PP
Definition at line 64 of file ImpulseCollection\&.cpp\&.
.PP
References cryomesh::common::TimeKeeper::getCycle(), and cryomesh::common::TimeKeeper::getTimeKeeper()\&.
.SS "void \fBcryomesh::components::ImpulseCollection::decrementActivityTimers\fP ()"
.PP
Decrement the activity timers of all impulses\&. 
.PP
Definition at line 192 of file ImpulseCollection\&.cpp\&.
.PP
Referenced by cryomesh::components::Connection::update()\&.
.SS "void \fBcryomesh::components::ImpulseCollection::enableDebug\fP (boolb)\fC [virtual]\fP"
.PP
Definition at line 320 of file ImpulseCollection\&.cpp\&.
.SS "virtual void \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::\fBenableLogging\fP (boolenable)\fC [inline, virtual, inherited]\fP"
.PP
Whether logging is enabled or not\&. \fBParameters:\fP
.RS 4
\fIbool\fP enable True to enable logging, false otherwise 
.RE
.PP

.PP
Definition at line 47 of file DataObjectController\&.h\&.
.PP
References cryomesh::dataobjects::DataObjectController< U, T >::dataObject\&.
.SS "double \fBcryomesh::components::ImpulseCollection::getActivity\fP (\fBcommon::Cycle\fPcycle) const"
.PP
Get activity at cycle\&. Sum all the Impulses in the collection on specified cycle and return activity
.PP
\fBParameters:\fP
.RS 4
\fICycle\fP cycle The cycle to calculate the activity on
.RE
.PP
\fBReturns:\fP
.RS 4
double The activity on specified cycle 
.RE
.PP

.PP
Definition at line 25 of file ImpulseCollection\&.cpp\&.
.PP
Referenced by cryomesh::components::Node::getActivity()\&.
.SS "double \fBcryomesh::components::ImpulseCollection::getActivity\fP () const"
.PP
Get activity at current cycle\&. Sum all the Impulses in the collection on the current cycle and return activity
.PP
\fBReturns:\fP
.RS 4
double The activity on specified cycle 
.RE
.PP

.PP
Definition at line 51 of file ImpulseCollection\&.cpp\&.
.PP
References cryomesh::common::TimeKeeper::getCycle(), and cryomesh::common::TimeKeeper::getTimeKeeper()\&.
.PP
Referenced by refreshDataObject()\&.
.SS "std::list< boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::getByActivityTimerValue\fP (doublevalue, \fBImpulseCollection::Comparison\fPcomp)"
.PP
Get impulse list by activity timer value\&. \fBParameters:\fP
.RS 4
\fIdouble\fP value activity timer value 
.br
\fIComparison\fP comp What comparison to make with the value
.RE
.PP
\fBReturns:\fP
.RS 4
std::list<boost::shared_ptr< Impulse> > The list of impulses that meet the comparison 
.RE
.PP

.PP
Definition at line 208 of file ImpulseCollection\&.cpp\&.
.PP
References EqualTo, GreaterThan, GreaterThanOrEqualTo, LessThan, and LessThanOrEqualTo\&.
.PP
Referenced by removeByActivityTimerValue()\&.
.SS "virtual const \fBdataobjects::DataObject\fP<unsigned long int , double >& \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::\fBgetDataObject\fP ()\fC [inline, virtual, inherited]\fP"
.PP
Get data object\&. \fBReturns:\fP
.RS 4
dataobjects::DataObject<U,T> & The data object 
.RE
.PP

.PP
Definition at line 68 of file DataObjectController\&.h\&.
.PP
References cryomesh::dataobjects::DataObjectController< U, T >::dataObject, and cryomesh::dataobjects::DataObjectController< U, T >::refreshDataObject()\&.
.SS "virtual const std::map<unsigned long int , double >& \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::\fBgetMap\fP ()\fC [inline, virtual, inherited]\fP"
.PP
Get all cycle values\&. \fBReturns:\fP
.RS 4
std::map<unsigned long int, double> & The cycle values 
.RE
.PP

.PP
Definition at line 57 of file DataObjectController\&.h\&.
.PP
References cryomesh::dataobjects::DataObjectController< U, T >::dataObject, and cryomesh::dataobjects::DataObjectController< U, T >::refreshDataObject()\&.
.SS "bool cryomesh::components::ImpulseCollection::operator!= (const \fBImpulseCollection\fP &obj) const"
.PP
Not comparator operator\&. \fBParameters:\fP
.RS 4
\fIconst\fP \fBImpulseCollection\fP & obj RHS object
.RE
.PP
\fBReturns:\fP
.RS 4
bool True if not equal, false otherwise 
.RE
.PP

.PP
Definition at line 371 of file ImpulseCollection\&.cpp\&.
.SS "const \fBImpulseCollection\fP cryomesh::components::ImpulseCollection::operator+ (const \fBImpulseCollection\fP &obj) const"
.PP
Non-destructive addition operator\&. \fBParameters:\fP
.RS 4
\fIconst\fP \fBImpulseCollection\fP & obj RHS addition
.RE
.PP
\fBReturns:\fP
.RS 4
\fBImpulseCollection\fP New object after addition 
.RE
.PP

.PP
Definition at line 314 of file ImpulseCollection\&.cpp\&.
.SS "\fBImpulseCollection\fP & cryomesh::components::ImpulseCollection::operator+= (const \fBImpulseCollection\fP &obj)"
.PP
Destructive addition and assignment operator\&. \fBParameters:\fP
.RS 4
\fIconst\fP \fBImpulseCollection\fP & obj RHS addition
.RE
.PP
\fBReturns:\fP
.RS 4
\fBImpulseCollection\fP & This object after addition and assignment 
.RE
.PP

.PP
Definition at line 294 of file ImpulseCollection\&.cpp\&.
.SS "\fBImpulseCollection\fP & cryomesh::components::ImpulseCollection::operator= (const \fBImpulseCollection\fP &obj)"
.PP
Assignment operator\&. \fBParameters:\fP
.RS 4
\fIconst\fP \fBImpulseCollection\fP & obj RHS assignment
.RE
.PP
\fBReturns:\fP
.RS 4
\fBImpulseCollection\fP & This object after assignment 
.RE
.PP

.PP
Definition at line 285 of file ImpulseCollection\&.cpp\&.
.SS "bool cryomesh::components::ImpulseCollection::operator== (const \fBImpulseCollection\fP &obj) const"
.PP
Comparator operator\&. \fBParameters:\fP
.RS 4
\fIconst\fP \fBImpulseCollection\fP & obj RHS object
.RE
.PP
\fBReturns:\fP
.RS 4
bool True if equal, false otherwise 
.RE
.PP

.PP
Definition at line 324 of file ImpulseCollection\&.cpp\&.
.SS "void \fBcryomesh::components::ImpulseCollection::refreshDataObject\fP ()\fC [virtual]\fP"
.PP
Inherited from DataObjectController\&. Overriden to force refresh update on call 
.PP
Reimplemented from \fBcryomesh::dataobjects::DataObjectController< unsigned long int, double >\fP\&.
.PP
Definition at line 265 of file ImpulseCollection\&.cpp\&.
.PP
References cryomesh::dataobjects::DataObject< U, T >::clear(), cryomesh::dataobjects::DataObjectController< unsigned long int, double >::dataObject, getActivity(), cryomesh::common::TimeKeeper::getCycle(), cryomesh::dataobjects::DataObject< U, T >::getDatasetMaximumSize(), cryomesh::common::TimeKeeper::getTimeKeeper(), cryomesh::dataobjects::DataObject< U, T >::insert(), cryomesh::dataobjects::DataObject< U, T >::isLoggingEnabled(), and cryomesh::common::Cycle::toULInt()\&.
.SS "std::list< boost::shared_ptr< \fBImpulse\fP > > \fBcryomesh::components::ImpulseCollection::removeByActivityTimerValue\fP (doublevalue = \fC0\fP, \fBImpulseCollection::Comparison\fPcomp = \fC\fBLessThanOrEqualTo\fP\fP)"
.PP
remove impulses by activity timer value \fBParameters:\fP
.RS 4
\fIdouble\fP value activity timer value 
.br
\fIComparison\fP comp What comparison to make with the value
.RE
.PP
\fBReturns:\fP
.RS 4
std::list<boost::shared_ptr< Impulse> > The that meet the comparison and were removed 
.RE
.PP

.PP
Definition at line 258 of file ImpulseCollection\&.cpp\&.
.PP
References getByActivityTimerValue()\&.
.PP
Referenced by cryomesh::components::Connection::update()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "std::ostream& operator<< (std::ostream &os, const \fBImpulseCollection\fP &obj)\fC [friend]\fP"
.PP
To stream operator\&. \fBParameters:\fP
.RS 4
\fIstd::ostream\fP & os The output stream 
.br
\fIconst\fP \fBImpulseCollection\fP & obj The object to stream
.RE
.PP
\fBReturns:\fP
.RS 4
std::ostream & The output stream 
.RE
.PP

.PP
Definition at line 375 of file ImpulseCollection\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBdataobjects::DataObject\fP<unsigned long int , double > \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::\fBdataObject\fP\fC [protected, inherited]\fP"
.PP
Definition at line 85 of file DataObjectController\&.h\&.
.PP
Referenced by refreshDataObject(), and cryomesh::components::Node::update()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for cryomesh from the source code\&.
