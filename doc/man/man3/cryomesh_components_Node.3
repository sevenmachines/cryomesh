.TH "cryomesh::components::Node" 3 "Thu Jul 7 2011" "cryomesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cryomesh::components::Node \- 
.PP
\fBNode\fP is an accumulation and computational nodal point of impulses.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Node.h>\fP
.PP
Inherits \fBDataObjectController< unsigned long int, double >\fP.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBActivationState\fP { \fBPositive\fP, \fBNegative\fP, \fBNone\fP }"
.br
.RI "\fIEnum representing posible activation states. \fP"
.ti -1c
.RI "enum \fBRecoverySetting\fP { \fBCLEAR_ALL_IMPULSES\fP = 1, \fBCLEAR_ACTIVE_IMPULSES\fP = 2, \fBDEACTIVATE_DURING_RECOVERY\fP = 4 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNode\fP ()"
.br
.RI "\fIContructor. \fP"
.ti -1c
.RI "virtual \fB~Node\fP ()"
.br
.RI "\fIDestructor. \fP"
.ti -1c
.RI "virtual void \fBupdate\fP ()"
.br
.ti -1c
.RI "virtual void \fBforceFire\fP ()"
.br
.RI "\fIForce the node to fire. \fP"
.ti -1c
.RI "virtual boost::shared_ptr< \fBImpulse\fP > \fBaddImpulse\fP (boost::shared_ptr< \fBImpulse\fP > impulse)"
.br
.RI "\fIAdd incoming \fBImpulse\fP. \fP"
.ti -1c
.RI "virtual void \fBaddImpulses\fP (std::list< boost::shared_ptr< \fBImpulse\fP > > \fBimpulses\fP)"
.br
.RI "\fIAdd a list of incoming Impulses. \fP"
.ti -1c
.RI "const \fBcommon::Connector\fP< \fBNode\fP, \fBConnection\fP > & \fBgetConnector\fP () const "
.br
.RI "\fIGet the Connector object for this \fBNode\fP. \fP"
.ti -1c
.RI "\fBcommon::Connector\fP< \fBNode\fP, \fBConnection\fP > & \fBgetMutableConnector\fP ()"
.br
.RI "\fIGet the mutable Connector object for this \fBNode\fP. \fP"
.ti -1c
.RI "bool \fBisInputIsolated\fP () const "
.br
.ti -1c
.RI "bool \fBisOutputIsolated\fP () const "
.br
.ti -1c
.RI "void \fBconnectInput\fP (boost::shared_ptr< \fBConnection\fP > con)"
.br
.ti -1c
.RI "void \fBconnectOutput\fP (boost::shared_ptr< \fBConnection\fP > con)"
.br
.ti -1c
.RI "const \fBImpulseCollection\fP & \fBgetImpulses\fP () const "
.br
.RI "\fIGet the collection of Impulses for this \fBNode\fP. \fP"
.ti -1c
.RI "const boost::shared_ptr< \fBImpulse\fP > \fBgetEmittedImpulse\fP () const "
.br
.RI "\fIGet the \fBImpulse\fP that is emitted. \fP"
.ti -1c
.RI "boost::shared_ptr< \fBImpulse\fP > \fBgetMutableEmittedImpulse\fP ()"
.br
.RI "\fIGet the mutable \fBImpulse\fP that is emitted. \fP"
.ti -1c
.RI "virtual void \fBemitImpulsePositive\fP ()"
.br
.RI "\fIEmit a positive impulse to outgoing connections. \fP"
.ti -1c
.RI "virtual void \fBemitImpulseNegative\fP ()"
.br
.RI "\fIEmit a negative impulse to outgoing connections. \fP"
.ti -1c
.RI "\fBImpulseCollection\fP & \fBgetMutableImpulses\fP ()"
.br
.RI "\fIGet the mutable collection of Impulses for this \fBNode\fP. \fP"
.ti -1c
.RI "const std::map< \fBcommon::Cycle\fP, double > & \fBgetActivities\fP () const "
.br
.RI "\fIGet the collection of all activities. \fP"
.ti -1c
.RI "double \fBupdateActivity\fP ()"
.br
.RI "\fIUpdate and get the current activity of the node. \fP"
.ti -1c
.RI "double \fBupdateActivity\fP (const \fBcommon::Cycle\fP &cycle)"
.br
.RI "\fIUpdate and get the activity of the node on specific cycle. \fP"
.ti -1c
.RI "double \fBgetActivity\fP () const "
.br
.RI "\fIGet the current activity of the node. \fP"
.ti -1c
.RI "double \fBgetActivity\fP (const \fBcommon::Cycle\fP &cycle) const "
.br
.RI "\fIGet the activity of the node on specific cycle. \fP"
.ti -1c
.RI "double \fBsetActivity\fP (double activity)"
.br
.RI "\fISet the current activity of the node. \fP"
.ti -1c
.RI "double \fBsetActivity\fP (const \fBcommon::Cycle\fP &cycle, double activity)"
.br
.RI "\fISet the activity at cycle of the node. \fP"
.ti -1c
.RI "boost::shared_ptr< \fBmanager::DatabaseObject\fP > \fBgetDatabaseObject\fP () const "
.br
.RI "\fIReturn a database object for this node. \fP"
.ti -1c
.RI "const spacial::Point & \fBgetPosition\fP () const "
.br
.RI "\fIget the position of the node \fP"
.ti -1c
.RI "void \fBsetPosition\fP (const spacial::Point &new_position)"
.br
.RI "\fISet the spacial position of the node, remembering to update connections lengths. \fP"
.ti -1c
.RI "\fBActivationState\fP \fBgetLastActivationState\fP () const "
.br
.RI "\fIGet the last activation state. \fP"
.ti -1c
.RI "void \fBrandomise\fP ()"
.br
.RI "\fIRandomise the nodes state. \fP"
.ti -1c
.RI "virtual void \fBenableDebug\fP (bool b)"
.br
.ti -1c
.RI "bool \fBisTriggered\fP (\fBActivationState\fP state=None)"
.br
.RI "\fICheck if \fBNode\fP is currently triggered. \fP"
.ti -1c
.RI "bool \fBisActive\fP (const \fBActivationState\fP state=None)"
.br
.RI "\fICheck if \fBNode\fP is currently activated. \fP"
.ti -1c
.RI "bool \fBisLive\fP ()"
.br
.RI "\fICheck if \fBNode\fP is live, ie active at any point in now or the future. \fP"
.ti -1c
.RI "bool \fBisPrimaryInputAttachedNode\fP () const "
.br
.ti -1c
.RI "bool \fBisPrimaryOutputAttachedNode\fP () const "
.br
.ti -1c
.RI "std::vector< boost::shared_ptr< \fBConnection\fP > > \fBgetPrimaryInputConnections\fP ()"
.br
.ti -1c
.RI "std::vector< boost::shared_ptr< \fBConnection\fP > > \fBgetPrimaryOutputConnections\fP ()"
.br
.ti -1c
.RI "std::ostream & \fBprintConnections\fP (std::ostream &os, const std::map< boost::uuids::uuid, boost::shared_ptr< \fBConnection\fP > > &all_cons, const std::string formatter='') const "
.br
.ti -1c
.RI "virtual void \fBenableLogging\fP (bool enable)"
.br
.RI "\fIWhether logging is enabled or not. \fP"
.ti -1c
.RI "virtual const std::map< unsigned long int, double > & \fBgetMap\fP ()"
.br
.RI "\fIGet all cycle values. \fP"
.ti -1c
.RI "virtual const \fBdataobjects::DataObject\fP< unsigned long int, double > & \fBgetDataObject\fP ()"
.br
.RI "\fIGet data object. \fP"
.ti -1c
.RI "virtual void \fBrefreshDataObject\fP ()"
.br
.RI "\fIFunction to allow refreshing implementation if required by subclasses. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static boost::shared_ptr< \fBNode\fP > \fBgetRandom\fP (const spacial::Point &max_point=\fBMAX_BOUNDING_BOX_POINT\fP)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int \fBMAX_ACTIVITIES_LENGTH\fP = 10"
.br
.ti -1c
.RI "static const double \fBACTIVITY_THRESHOLD\fP = 3 * \fBImpulse::MAX_ACTIVITY\fP"
.br
.ti -1c
.RI "static const spacial::Point \fBMAX_BOUNDING_BOX_POINT\fP = spacial::Point(100, 100, 100)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBNode::ActivationState\fP \fBcheckActivationState\fP ()"
.br
.RI "\fICheck level of impulses and decide whether to activate the node. \fP"
.ti -1c
.RI "virtual \fBNode::ActivationState\fP \fBcheckFire\fP ()"
.br
.RI "\fICheck if the object is ready to fire off an impulse and carry it out. \fP"
.ti -1c
.RI "virtual void \fBupdateImpulses\fP ()"
.br
.RI "\fIUpdate the collection of impulses by one cycle. \fP"
.ti -1c
.RI "virtual void \fBemitImpulse\fP (bool positive)"
.br
.RI "\fIEmit an impulse to outgoing connections. \fP"
.ti -1c
.RI "virtual double \fBaddActivity\fP (\fBcommon::Cycle\fP, double activity)"
.br
.RI "\fIAdd an activity to the list of activities. \fP"
.ti -1c
.RI "virtual void \fBupdatePosition\fP ()"
.br
.RI "\fIRecalculate state of node and connections based on current position. \fP"
.ti -1c
.RI "virtual void \fBenterRecovery\fP (const int recovery_settings=CLEAR_ALL_IMPULSES)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBdataobjects::DataObject\fP< unsigned long int, double > \fBdataObject\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "boost::shared_ptr< \fBcommon::Connector\fP< \fBNode\fP, \fBConnection\fP > > \fBconnector\fP"
.br
.ti -1c
.RI "\fBImpulseCollection\fP \fBimpulses\fP"
.br
.ti -1c
.RI "boost::shared_ptr< \fBImpulse\fP > \fBemittedImpulse\fP"
.br
.ti -1c
.RI "\fBdataobjects::DataObject\fP< \fBcommon::Cycle\fP, double > \fBactivities\fP"
.br
.ti -1c
.RI "spacial::Point \fBposition\fP"
.br
.ti -1c
.RI "\fBActivationState\fP \fBlastActivationState\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBNode\fP &obj)"
.br
.RI "\fITo stream operator. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\fBNode\fP is an accumulation and computational nodal point of impulses. 

A \fBNode\fP represents the end point of one or many connections. Here, Impulses are accumulated and new Impulses generated depending on some determining criteria 
.PP
Definition at line 38 of file Node.h.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBcryomesh::components::Node::ActivationState\fP"
.PP
Enum representing posible activation states. Last activation state. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPositive \fP\fP
.TP
\fB\fINegative \fP\fP
.TP
\fB\fINone \fP\fP

.PP
Definition at line 46 of file Node.h.
.SS "enum \fBcryomesh::components::Node::RecoverySetting\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fICLEAR_ALL_IMPULSES \fP\fP
.TP
\fB\fICLEAR_ACTIVE_IMPULSES \fP\fP
.TP
\fB\fIDEACTIVATE_DURING_RECOVERY \fP\fP

.PP
Definition at line 50 of file Node.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "cryomesh::components::Node::Node ()"
.PP
Contructor. Contructor for \fBNode\fP 
.PP
Definition at line 37 of file Node.cpp.
.PP
References activities, connector, emittedImpulse, MAX_ACTIVITIES_LENGTH, and cryomesh::dataobjects::DataObject< U, T >::setDatasetMaximumSize().
.SS "cryomesh::components::Node::~Node ()\fC [virtual]\fP"
.PP
Destructor. Destructor for \fBNode\fP 
.PP
Definition at line 45 of file Node.cpp.
.SH "Member Function Documentation"
.PP 
.SS "double cryomesh::components::Node::addActivity (\fBcommon::Cycle\fPcycle, doubleactivity)\fC [protected, virtual]\fP"
.PP
Add an activity to the list of activities. \fBParameters:\fP
.RS 4
\fICycle\fP cycle The cycle this activity is on 
.br
\fIdouble\fP activity The activity to add
.RE
.PP
\fBReturns:\fP
.RS 4
The current activity 
.RE
.PP

.PP
Definition at line 278 of file Node.cpp.
.PP
References activities, and cryomesh::dataobjects::DataObject< U, T >::insert().
.PP
Referenced by setActivity().
.SS "boost::shared_ptr< \fBImpulse\fP > cryomesh::components::Node::addImpulse (boost::shared_ptr< \fBImpulse\fP >impulse)\fC [virtual]\fP"
.PP
Add incoming \fBImpulse\fP. \fBParameters:\fP
.RS 4
\fIboost::shared_ptr<Impulse>\fP impulse The \fBImpulse\fP to add 
.RE
.PP
\fBReturns:\fP
.RS 4
boost::shared_ptr<Impulse> The impulse added, null if none added 
.RE
.PP

.PP
Definition at line 133 of file Node.cpp.
.PP
References getMutableImpulses(), and cryomesh::common::TimeKeeper::getTimeKeeper().
.PP
Referenced by addImpulses(), and forceFire().
.SS "void cryomesh::components::Node::addImpulses (std::list< boost::shared_ptr< \fBImpulse\fP > >impulses)\fC [virtual]\fP"
.PP
Add a list of incoming Impulses. \fBParameters:\fP
.RS 4
\fIstd::list<boost::shared_ptr<Impulse>\fP > impulses The Impulses to add 
.RE
.PP

.PP
Definition at line 143 of file Node.cpp.
.PP
References addImpulse(), getImpulses(), and impulses.
.SS "\fBNode::ActivationState\fP cryomesh::components::Node::checkActivationState ()\fC [protected, virtual]\fP"
.PP
Check level of impulses and decide whether to activate the node. \fBReturns:\fP
.RS 4
\fBNode::ActivationState\fP Positive if activity is over threshold, negative if under -threshold, None otherwise 
.RE
.PP

.PP
Definition at line 165 of file Node.cpp.
.PP
References ACTIVITY_THRESHOLD, Negative, None, Positive, and updateActivity().
.PP
Referenced by checkFire().
.SS "\fBNode::ActivationState\fP cryomesh::components::Node::checkFire ()\fC [protected, virtual]\fP"
.PP
Check if the object is ready to fire off an impulse and carry it out. \fBReturns:\fP
.RS 4
ActivationState Return the action that was taken 
.RE
.PP

.PP
Definition at line 91 of file Node.cpp.
.PP
References checkActivationState(), emitImpulseNegative(), emitImpulsePositive(), enterRecovery(), Negative, and Positive.
.PP
Referenced by update().
.SS "void cryomesh::components::Node::connectInput (boost::shared_ptr< \fBConnection\fP >con)"
.PP
Definition at line 456 of file Node.cpp.
.PP
References getMutableConnector().
.SS "void cryomesh::components::Node::connectOutput (boost::shared_ptr< \fBConnection\fP >con)"
.PP
Definition at line 459 of file Node.cpp.
.PP
References getMutableConnector().
.SS "void cryomesh::components::Node::emitImpulse (boolpositive)\fC [protected, virtual]\fP"
.PP
Emit an impulse to outgoing connections. \fBParameters:\fP
.RS 4
\fIbool\fP positive Is the impulse to be emitted positive or negative 
.RE
.PP

.PP
Definition at line 190 of file Node.cpp.
.PP
References cryomesh::components::Connection::add(), getEmittedImpulse(), cryomesh::components::Connection::getImpulses(), getMutableConnector(), and getMutableEmittedImpulse().
.PP
Referenced by emitImpulseNegative(), and emitImpulsePositive().
.SS "void cryomesh::components::Node::emitImpulseNegative ()\fC [virtual]\fP"
.PP
Emit a negative impulse to outgoing connections. 
.PP
Definition at line 186 of file Node.cpp.
.PP
References emitImpulse().
.PP
Referenced by checkFire().
.SS "void cryomesh::components::Node::emitImpulsePositive ()\fC [virtual]\fP"
.PP
Emit a positive impulse to outgoing connections. 
.PP
Definition at line 182 of file Node.cpp.
.PP
References emitImpulse().
.PP
Referenced by checkFire().
.SS "void cryomesh::components::Node::enableDebug (boolb)\fC [virtual]\fP"
.PP
Definition at line 493 of file Node.cpp.
.SS "virtual void \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::enableLogging (boolenable)\fC [inline, virtual, inherited]\fP"
.PP
Whether logging is enabled or not. \fBParameters:\fP
.RS 4
\fIbool\fP enable True to enable logging, false otherwise 
.RE
.PP

.PP
Definition at line 48 of file DataObjectController.h.
.SS "void cryomesh::components::Node::enterRecovery (const intrecovery_settings = \fCCLEAR_ALL_IMPULSES\fP)\fC [protected, virtual]\fP"
.PP
Definition at line 107 of file Node.cpp.
.PP
References CLEAR_ACTIVE_IMPULSES, CLEAR_ALL_IMPULSES, cryomesh::components::ImpulseCollection::clearActiveImpulses(), cryomesh::common::TimeKeeper::getTimeKeeper(), and impulses.
.PP
Referenced by checkFire().
.SS "void cryomesh::components::Node::forceFire ()\fC [virtual]\fP"
.PP
Force the node to fire. 
.PP
Definition at line 79 of file Node.cpp.
.PP
References addImpulse(), and cryomesh::components::Impulse::getTriggerImpulse().
.SS "const std::map< \fBcommon::Cycle\fP, double > & cryomesh::components::Node::getActivities () const"
.PP
Get the collection of all activities. \fBReturns:\fP
.RS 4
std::list<double> & List of activities 
.RE
.PP

.PP
Definition at line 250 of file Node.cpp.
.PP
References activities, and cryomesh::dataobjects::DataObject< U, T >::getMap().
.PP
Referenced by getDatabaseObject(), and update().
.SS "double cryomesh::components::Node::getActivity () const"
.PP
Get the current activity of the node. \fBReturns:\fP
.RS 4
double The current activity 
.RE
.PP

.PP
Definition at line 254 of file Node.cpp.
.PP
References cryomesh::common::TimeKeeper::getTimeKeeper().
.PP
Referenced by getDatabaseObject(), isActive(), cryomesh::structures::Mesh::update(), updateActivity(), and cryomesh::structures::Mesh::warp().
.SS "double cryomesh::components::Node::getActivity (const \fBcommon::Cycle\fP &cycle) const"
.PP
Get the activity of the node on specific cycle. \fBReturns:\fP
.RS 4
double The current activity 
.RE
.PP

.PP
Definition at line 258 of file Node.cpp.
.PP
References cryomesh::components::ImpulseCollection::getActivity(), and getImpulses().
.SS "const \fBcommon::Connector\fP< \fBNode\fP, \fBConnection\fP > & cryomesh::components::Node::getConnector () const"
.PP
Get the Connector object for this \fBNode\fP. \fBReturns:\fP
.RS 4
const common::Connector<Node, Connection> & The Connector for this object 
.RE
.PP

.PP
Definition at line 83 of file Node.cpp.
.PP
References connector.
.PP
Referenced by getPrimaryInputConnections(), getPrimaryOutputConnections(), isInputIsolated(), isOutputIsolated(), isPrimaryInputAttachedNode(), isPrimaryOutputAttachedNode(), and cryomesh::components::operator<<().
.SS "boost::shared_ptr< \fBmanager::DatabaseObject\fP > cryomesh::components::Node::getDatabaseObject () const"
.PP
Return a database object for this node. \fBReturns:\fP
.RS 4
DatabaseObject 
.RE
.PP

.PP
Definition at line 283 of file Node.cpp.
.PP
References getActivities(), getActivity(), getPosition(), and cryomesh::common::TimeKeeper::getTimeKeeper().
.SS "virtual const \fBdataobjects::DataObject\fP<unsigned long int , double >& \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::getDataObject ()\fC [inline, virtual, inherited]\fP"
.PP
Get data object. \fBReturns:\fP
.RS 4
dataobjects::DataObject<U,T> & The data object 
.RE
.PP

.PP
Definition at line 69 of file DataObjectController.h.
.SS "const boost::shared_ptr< \fBImpulse\fP > cryomesh::components::Node::getEmittedImpulse () const"
.PP
Get the \fBImpulse\fP that is emitted. \fBReturns:\fP
.RS 4
const boost::shared_ptr< Impulse > The emitted \fBImpulse\fP 
.RE
.PP

.PP
Definition at line 238 of file Node.cpp.
.PP
References emittedImpulse.
.PP
Referenced by emitImpulse().
.SS "const \fBImpulseCollection\fP & cryomesh::components::Node::getImpulses () const"
.PP
Get the collection of Impulses for this \fBNode\fP. \fBReturns:\fP
.RS 4
const \fBImpulseCollection\fP & The collection of Impulses for this \fBNode\fP 
.RE
.PP

.PP
Definition at line 234 of file Node.cpp.
.PP
References impulses.
.PP
Referenced by addImpulses(), getActivity(), isLive(), cryomesh::components::operator<<(), and updateActivity().
.SS "\fBNode::ActivationState\fP cryomesh::components::Node::getLastActivationState () const"
.PP
Get the last activation state. \fBReturns:\fP
.RS 4
ActivationState Return the last activation state 
.RE
.PP

.PP
Definition at line 302 of file Node.cpp.
.PP
References lastActivationState.
.PP
Referenced by isTriggered().
.SS "virtual const std::map<unsigned long int , double >& \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::getMap ()\fC [inline, virtual, inherited]\fP"
.PP
Get all cycle values. \fBReturns:\fP
.RS 4
std::map<unsigned long int, double> & The cycle values 
.RE
.PP

.PP
Definition at line 58 of file DataObjectController.h.
.SS "\fBcommon::Connector\fP< \fBNode\fP, \fBConnection\fP > & cryomesh::components::Node::getMutableConnector ()"
.PP
Get the mutable Connector object for this \fBNode\fP. \fBReturns:\fP
.RS 4
common::Connector<Node, Connection> & The mutable Connector for this object 
.RE
.PP

.PP
Definition at line 87 of file Node.cpp.
.PP
References connector.
.PP
Referenced by connectInput(), connectOutput(), and emitImpulse().
.SS "boost::shared_ptr< \fBImpulse\fP > cryomesh::components::Node::getMutableEmittedImpulse ()"
.PP
Get the mutable \fBImpulse\fP that is emitted. \fBReturns:\fP
.RS 4
boost::shared_ptr< Impulse > The mutable emitted \fBImpulse\fP 
.RE
.PP

.PP
Definition at line 242 of file Node.cpp.
.PP
References emittedImpulse.
.PP
Referenced by emitImpulse().
.SS "\fBImpulseCollection\fP & cryomesh::components::Node::getMutableImpulses ()"
.PP
Get the mutable collection of Impulses for this \fBNode\fP. \fBReturns:\fP
.RS 4
\fBImpulseCollection\fP & The mutable collection of Impulses for this \fBNode\fP 
.RE
.PP

.PP
Definition at line 246 of file Node.cpp.
.PP
References impulses.
.PP
Referenced by addImpulse(), and update().
.SS "const spacial::Point & cryomesh::components::Node::getPosition () const"
.PP
get the position of the node \fBReturns:\fP
.RS 4
spacial::Point The spacial location of the node 
.RE
.PP

.PP
Definition at line 293 of file Node.cpp.
.PP
References position.
.PP
Referenced by getDatabaseObject(), cryomesh::structures::Mesh::update(), and cryomesh::structures::Mesh::warp().
.SS "std::vector< boost::shared_ptr< \fBConnection\fP > > cryomesh::components::Node::getPrimaryInputConnections ()"
.PP
Definition at line 412 of file Node.cpp.
.PP
References getConnector().
.SS "std::vector< boost::shared_ptr< \fBConnection\fP > > cryomesh::components::Node::getPrimaryOutputConnections ()"
.PP
Definition at line 434 of file Node.cpp.
.PP
References getConnector().
.SS "boost::shared_ptr< \fBNode\fP > cryomesh::components::Node::getRandom (const spacial::Point &max_point = \fC\fBMAX_BOUNDING_BOX_POINT\fP\fP)\fC [static]\fP"
.PP
Definition at line 26 of file Node.cpp.
.PP
Referenced by cryomesh::structures::Cluster::createNodes(), and randomise().
.SS "bool cryomesh::components::Node::isActive (const \fBActivationState\fPstate = \fCNone\fP)"
.PP
Check if \fBNode\fP is currently activated. \fBParameters:\fP
.RS 4
\fIActivationState\fP Positive for positive activity test, Negative for negative activity test, None for any activity test
.RE
.PP
\fBReturns:\fP
.RS 4
bool True if activated, false otherwise 
.RE
.PP

.PP
Definition at line 320 of file Node.cpp.
.PP
References getActivity(), Negative, None, and Positive.
.SS "bool cryomesh::components::Node::isInputIsolated () const"
.PP
Definition at line 348 of file Node.cpp.
.PP
References getConnector().
.PP
Referenced by isPrimaryInputAttachedNode().
.SS "bool cryomesh::components::Node::isLive ()"
.PP
Check if \fBNode\fP is live, ie active at any point in now or the future. \fBReturns:\fP
.RS 4
bool True if live, false otherwise 
.RE
.PP

.PP
Definition at line 339 of file Node.cpp.
.PP
References getImpulses().
.SS "bool cryomesh::components::Node::isOutputIsolated () const"
.PP
Definition at line 355 of file Node.cpp.
.PP
References getConnector().
.PP
Referenced by isPrimaryOutputAttachedNode().
.SS "bool cryomesh::components::Node::isPrimaryInputAttachedNode () const"
.PP
Definition at line 362 of file Node.cpp.
.PP
References getConnector(), and isInputIsolated().
.PP
Referenced by cryomesh::components::operator<<().
.SS "bool cryomesh::components::Node::isPrimaryOutputAttachedNode () const"
.PP
Definition at line 387 of file Node.cpp.
.PP
References getConnector(), and isOutputIsolated().
.PP
Referenced by cryomesh::components::operator<<().
.SS "bool cryomesh::components::Node::isTriggered (\fBActivationState\fPstate = \fCNone\fP)"
.PP
Check if \fBNode\fP is currently triggered. \fBParameters:\fP
.RS 4
\fIActivationState\fP Positive for positive trigger test, Negative for negative trigger test, None for any trigger test
.RE
.PP
\fBReturns:\fP
.RS 4
bool True if triggered, false otherwise 
.RE
.PP

.PP
Definition at line 310 of file Node.cpp.
.PP
References getLastActivationState(), and None.
.SS "std::ostream & cryomesh::components::Node::printConnections (std::ostream &os, const std::map< boost::uuids::uuid, boost::shared_ptr< \fBConnection\fP > > &all_cons, const std::stringformatter = \fC''\fP) const"
.PP
Definition at line 525 of file Node.cpp.
.PP
Referenced by cryomesh::components::operator<<().
.SS "void cryomesh::components::Node::randomise ()"
.PP
Randomise the nodes state. 
.PP
Definition at line 306 of file Node.cpp.
.PP
References emittedImpulse, and getRandom().
.SS "virtual void \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::refreshDataObject ()\fC [inline, virtual, inherited]\fP"
.PP
Function to allow refreshing implementation if required by subclasses. 
.PP
Reimplemented in \fBcryomesh::components::ImpulseCollection\fP.
.PP
Definition at line 77 of file DataObjectController.h.
.SS "double cryomesh::components::Node::setActivity (doubleactivity)"
.PP
Set the current activity of the node. \fBParameters:\fP
.RS 4
\fIdouble\fP The current activity value to be set
.RE
.PP
\fBReturns:\fP
.RS 4
double The activity set 
.RE
.PP

.PP
Definition at line 270 of file Node.cpp.
.PP
References cryomesh::common::TimeKeeper::getTimeKeeper().
.PP
Referenced by updateActivity(), and cryomesh::structures::Mesh::warp().
.SS "double cryomesh::components::Node::setActivity (const \fBcommon::Cycle\fP &cycle, doubleactivity)"
.PP
Set the activity at cycle of the node. \fBParameters:\fP
.RS 4
\fIconst\fP Cycle & cycle The cycle the activty is on 
.br
\fIdouble\fP The current activity value to be set
.RE
.PP
\fBReturns:\fP
.RS 4
double The activity set 
.RE
.PP

.PP
Definition at line 274 of file Node.cpp.
.PP
References addActivity().
.SS "void cryomesh::components::Node::setPosition (const spacial::Point &new_position)"
.PP
Set the spacial position of the node, remembering to update connections lengths. \fBParameters:\fP
.RS 4
\fIspacial::Point\fP The position to place this node at 
.RE
.PP

.PP
Definition at line 297 of file Node.cpp.
.PP
References position, and updatePosition().
.SS "void cryomesh::components::Node::update ()\fC [virtual]\fP"
.PP
Definition at line 48 of file Node.cpp.
.PP
References checkFire(), cryomesh::components::ImpulseCollection::clearActiveImpulses(), cryomesh::dataobjects::DataObjectController< unsigned long int, double >::dataObject, getActivities(), getMutableImpulses(), cryomesh::dataobjects::DataObject< U, T >::insert(), cryomesh::dataobjects::DataObject< U, T >::isLoggingEnabled(), lastActivationState, and updateImpulses().
.SS "double cryomesh::components::Node::updateActivity ()"
.PP
Update and get the current activity of the node. \fBReturns:\fP
.RS 4
double The current activity 
.RE
.PP

.PP
Definition at line 262 of file Node.cpp.
.PP
References getActivity(), getImpulses(), and setActivity().
.PP
Referenced by checkActivationState().
.SS "double cryomesh::components::Node::updateActivity (const \fBcommon::Cycle\fP &cycle)"
.PP
Update and get the activity of the node on specific cycle. \fBReturns:\fP
.RS 4
double The current activity 
.RE
.PP

.PP
Definition at line 266 of file Node.cpp.
.PP
References getActivity(), getImpulses(), and setActivity().
.SS "void cryomesh::components::Node::updateImpulses ()\fC [protected, virtual]\fP"
.PP
Update the collection of impulses by one cycle. 
.PP
Definition at line 127 of file Node.cpp.
.PP
References cryomesh::components::ImpulseCollection::clearImpulses(), and impulses.
.PP
Referenced by update().
.SS "void cryomesh::components::Node::updatePosition ()\fC [protected, virtual]\fP"
.PP
Recalculate state of node and connections based on current position. 
.PP
Definition at line 463 of file Node.cpp.
.PP
References connector.
.PP
Referenced by setPosition().
.SH "Friends And Related Function Documentation"
.PP 
.SS "std::ostream& operator<< (std::ostream &os, const \fBNode\fP &obj)\fC [friend]\fP"
.PP
To stream operator. \fBParameters:\fP
.RS 4
\fIstd::ostream\fP & os The output stream 
.br
\fIconst\fP \fBNode\fP & obj The object to stream
.RE
.PP
\fBReturns:\fP
.RS 4
std::ostream & The output stream 
.RE
.PP

.PP
Definition at line 496 of file Node.cpp.
.SH "Member Data Documentation"
.PP 
.SS "\fBdataobjects::DataObject\fP<\fBcommon::Cycle\fP, double> \fBcryomesh::components::Node::activities\fP\fC [private]\fP"
.PP
Definition at line 430 of file Node.h.
.PP
Referenced by addActivity(), getActivities(), and Node().
.SS "const double \fBcryomesh::components::Node::ACTIVITY_THRESHOLD\fP = 3 * \fBImpulse::MAX_ACTIVITY\fP\fC [static]\fP"
.PP
Definition at line 331 of file Node.h.
.PP
Referenced by checkActivationState().
.SS "boost::shared_ptr<\fBcommon::Connector\fP<\fBNode\fP, \fBConnection\fP> > \fBcryomesh::components::Node::connector\fP\fC [private]\fP"
.PP
Definition at line 409 of file Node.h.
.PP
Referenced by getConnector(), getMutableConnector(), Node(), and updatePosition().
.SS "\fBdataobjects::DataObject\fP<unsigned long int , double > \fBcryomesh::dataobjects::DataObjectController\fP< unsigned long int , double  >::\fBdataObject\fP\fC [protected, inherited]\fP"
.PP
Definition at line 86 of file DataObjectController.h.
.PP
Referenced by cryomesh::components::ImpulseCollection::refreshDataObject(), and update().
.SS "boost::shared_ptr<\fBImpulse\fP> \fBcryomesh::components::Node::emittedImpulse\fP\fC [private]\fP"
.PP
Definition at line 423 of file Node.h.
.PP
Referenced by getEmittedImpulse(), getMutableEmittedImpulse(), Node(), and randomise().
.SS "\fBImpulseCollection\fP \fBcryomesh::components::Node::impulses\fP\fC [private]\fP"
.PP
Definition at line 416 of file Node.h.
.PP
Referenced by addImpulses(), enterRecovery(), getImpulses(), getMutableImpulses(), and updateImpulses().
.SS "\fBActivationState\fP \fBcryomesh::components::Node::lastActivationState\fP\fC [private]\fP"
.PP
Definition at line 444 of file Node.h.
.PP
Referenced by getLastActivationState(), and update().
.SS "const int \fBcryomesh::components::Node::MAX_ACTIVITIES_LENGTH\fP = 10\fC [static]\fP"
.PP
Definition at line 324 of file Node.h.
.PP
Referenced by Node().
.SS "const spacial::Point \fBcryomesh::components::Node::MAX_BOUNDING_BOX_POINT\fP = spacial::Point(100, 100, 100)\fC [static]\fP"
.PP
Definition at line 338 of file Node.h.
.SS "spacial::Point \fBcryomesh::components::Node::position\fP\fC [private]\fP"
.PP
Definition at line 437 of file Node.h.
.PP
Referenced by getPosition(), and setPosition().

.SH "Author"
.PP 
Generated automatically by Doxygen for cryomesh from the source code.
