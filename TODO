CURRENT---------------------------------------------------------------------------------


* cryomesh: Automatic disconnection of 'bad' node connections and some method of 
creating new connections to other nodes if required
	- Implement ClusterArchitect Test
	- Implement ClusterArchitect::analyseCluster()


HIGH ----------------------------------------------------------------------------------------

* GraphWindow: Allow multiple sets of data each with their own dataset and colour

* cryoviewer: Add overview of cluster energies
* cryoviewer: Add overview of output translations

* Write some test data to do a proper test run 

MEDIUM ------------------------------------------------------------------------------------

	 
* Cryoviewer: Sort out gl display, try fiddling with a camera
* Cryoviewer: Implement statistics osgpicking

* Write ImpulseTest::testRandom to check using bias

* Document check and update state/ and utilities/

* Bundle::testChannelStructure 

* Redesign database
	- NodeStructural (id, x, y, z)
	- NodeVolatile (id, cycle activity)
	
* Implement server
	- Set command defs, a keystore to allowed messaging values

LOW -----------------------------------------------------------------------------------------



WISHLIST ----------------------------------------------------------------------------------

* Dont clear past impulses from Nodes on every cycle if extra performance is needed

DONE -----------------------------------------------------------------------------------------

* cryomesh: Automatic disconnection of 'bad' node connections and some method of 
creating new connections to other nodes if required
	 - Create ClusterArchitect to analyse then kill/birth nodes and connections (DONE)
	 - Add history support to clusters or clusterArchitect by way of a generic history store (DONE)
	 - Implement ClusterArchitect::birthRandomNodes (DONE)
	 - Implement ClusterArchitect::birthRandomConnections (DONE)
	 - Implement ClusterArchitect::getHistoryEntriesInRange (DONE)

	- Redefine functions in Cluster to their new ClusterArchitect equivalents (DONE)
		- Moved Cluster::createConnection to ClusterArchitect::createConnection (DONE)
		- Moved Cluster::createNodes to ClusterArchitect::birthRandomNodes (DONE)
		
* GraphWindow: Add proper scaling (DONE)

* cryoviewer: Add overview of bundle energy (DONE)

* Use a clusters energy to work out influence of a nodemesh's interpolated acivities 
on real activities (DONE)

* Disable StructureWindow GL until  SIGSEGV can be fixed (DONE) 

* BUG: Impulses have very high start/end values (DONE)

* Release build of cryoviewer shows no activity (DONE)

* Release cute tests of cryomesh-cute shows 8 more errors than debug build (DONE)
	- introduced by -O1 optimisation level 
	- Use of uninitilised variable is optimised out, fixed
	
* NodeMesh is now generated, now use these values to influence the actual cluster (DONE) 

* Implement NodeMesh
	- regenerate NodeMesh calculations when needed (DONE)
	- get interpolated activity sum from near neighbours (DONE)
		
* Implement NodeMeshTest (DONE)
	
* NodeMesh::regenerateNeighbourhoods() This can be optimised (DONE)

* Mesh Structure: Integrate activity grid into mesh (DONE)

* Implement Mesh (DONE)

* Implement Mesh warping in Cluster->warpMesh() (DEFERRED)

* Implement Impulse warping of mesh (DEFERRED)

* Mesh Structure: testApplyPointActivityToGrid needs investigation and fixing (DONE)
	
* Mesh Structure: Finish tests on ActivityGrid, used as underlying mesh structure (DONE)
* Mesh Structure: Add scaling into activity grids, and how this affects interpolation calls (DONE)

* Test creater autoconnect from config file (DONE)
	- CreatorTest::testAutoConnect is failing, but output of bundle << looks ok ??
	- rewrite test to use new creator streams
	
* Add cluster selector to StatisticsWindow (DONE)
* Add cluster visualiser to StatisticsWindow (DONE)
* Perform more tests on whether activity display is likely accurate (DONE)

* Make primary nodes backgrounds diferent (DONE)
* Finish connections viewing stuff (DONE)
* Alter connections drawing area to actual draw connection data (impulses superimposed on connection length) (DONE)
* Fix non-display of activities graph for nodes (DONE)
* Import activity drawing areas, display per cluster,  have each  node disable-able (DONE)
* Make statistics text display meaningful (Done)
* Have statistics window show something (DONE)
* Have structure show some basic openscengraph stuff (DONE)
* Implement simple Main initialisation from command line config (DONE)
* Implement simple gtk Main window to allow turning on/off displays (DONE)
* Implement demo of Structure display of node objects (DONE)

* Bug: GUI display shows no impulses since bundle->connectPrimary* changes, investigate. (DONE)
	- ImpulseCollection::getByActivityTimerValue was set to look for all <0, but impulses activity timers
	were capped to 0
	
* Check that actual output pattern channel is updated (DONE)

* Implement autoconnection of primary channels to clusters (DONE)

* Implement output pattern comparison and health updating (DONE)

* Test propogation more thoroughly, viewer shows anomalies (DONE)
	- Check connections made between nodes, they look badly connected (DONE)

* fix broken tests after addig delay to Node (DONE)

* Show input output ins Bundle print (DONE)

* Bundle::testChannelStructure 

* UseCasesTest, complete full basic test (DONE)

* Test input pattern channels actually firing their mapped fibres in Bundle update (DONE)

* Test output pattern channels being updated from their mapped fibres in Bundle update (DONE)

* Added database objects and functionality to patterns so that these can now 
store outputs (DONE)

* BUG: Statistician shows all nodes as active (DONE)

* Add some decent Statistician data (DONE)

* Force Bundle and sequencer to pass pattern channels maps by reference to avoid 
losing track of uuids (DONE)

* Build the Statistician to dump useful data about a bundle (DONE)

* FibreTest::testGetNodesPattern (DONE)
	- this tests, getting the in/out nodes of the fibre, force firing them, and getting the pattern 

* Test pattern generation when querying Fibre for Input node state (DONE)
	//NOTE: Do Fibre::getInputNodesPattern actual gets the output nodes from connections, either need to (DONE)
	//- Have connections hold an input node too (BEST)
	//- Have output nodes on connections in primary output fibres
	
* NodeTest::testforceFire (DONE)

*Document check and update common/ components/ dataobjects/ manager/ and structures/ (DONE)

* Implement input pattern channels actually firing their mapped fibres in Bundle update (DONE)

* Implement output pattern channels being updated from their mapped fibres in Bundle update (DONE)

* Test Creator check structure (DONE

* Test connecting pattern channels to clusters through creator (DONE)

* Complete writing BundleTest::testConnectPatternChannels (DONE)

* Complete Creators loaddata, set primary, etc unfinished creation methods (DONE)

* Creator: Create primary fibres automatically from the datafile 
	then connect them to specific clusters in the config file	(DONE)
	
* Bundle: Add primary in/out map to bundle (DONE)

* Bundle: Create PatternChannels (DONE)

* Write tests for partial implementation of creator actual bundle creation methods (DONE)

* Implement cryomanager 'creation from config file' using Creator class (DONE)

* Add Database objects create from database entry for connection and node (DONE)
	- Create tests (DONE)

* Add updateNode/Connection functions to DatabaseManager to update 
	entries instead of creating new ones (DONE)
	- Create tests (DONE)

* Add deleteNodeByCycle/ConnectionByCycle functions to DatabaseManager (DONE)
	- Create tests (DONE)
	
* Impulses do not seem to be propogating from fibre to Nodes, see UseCasesTest (05/03/2011)
	- Impulses needed to be time reset on addition to connections otherwise they were always in the past

* Add Spherical or point co-ordinates to components. (05/03/2011)
	- Whats the local reference point inside a cluster? DONE (see below)
	- Whats the global refrence point for structural components?  DONE (see below)
	- Set a max bounding box, give each node a random point, allow for a density function if needed
	- Nodes and connections are stationary, caclulate everything on creation.
	- When impulses added to connections, use connection length
	
* Use DataObjects in Nodes and ImpulseCollection to show whats happening
	- Alter data objects so that it returns enough data (eg x,y) for database entries
	
* Use DataObjects in Nodes and ImpulseCollection to show whats happening
	- Alter data objects so that it returns enough data (eg x,y) for database entries
	
* Implement database adding of nodes and connections
	- Insert node with equal id overwrites or is it a new entry with a diferent cycle?
	- NodeDatabaseObject (DONE)
	- Node::getDatabaseObject (DONE)
	- ConnectionDatabaseObject (DONE)
	- Connection::getDatabaseObject (DONE)
	
